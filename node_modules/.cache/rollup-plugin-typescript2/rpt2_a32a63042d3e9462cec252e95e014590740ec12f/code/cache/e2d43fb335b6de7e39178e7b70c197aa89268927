{"code":"import { TrackerConfig } from \"../types/index\";\nimport { createHistoryEvent } from \"../utils/pv\";\nconst btnList = [\"click\", \"dbClick\"];\n// 可以自定义添加---这里不用这么多\n// \"contextmenu\",\n//   \"mouseover\",\n//   \"mouseout\",\n//   \"mousemove\",\n//   \"mousedown\",\n//   \"mouseup\",\n//   \"touchstart\",\n//   \"touchmove\",\n//   \"touchend\",\nexport default class Tracker {\n    constructor(options) {\n        this.data = Object.assign(Object.assign({}, this.initDef()), options);\n        this.installTracker();\n    }\n    initDef() {\n        // 重写history方法\n        window.history[\"pushState\"] = createHistoryEvent(\"pushState\");\n        window.history[\"replaceState\"] = createHistoryEvent(\"replaceState\");\n        return {\n            historyTracker: false,\n            hashTracker: false,\n            domTracker: false,\n            jsError: false,\n            sdkVersion: TrackerConfig.version,\n        };\n    }\n    // userId\n    setUserId(uuid) {\n        this.data.uuid = uuid;\n    }\n    setExtra(extra) {\n        this.data.extra = extra;\n    }\n    // 手动上报\n    handleSendTracker(data) {\n        this.reportTracker(data);\n    }\n    // 自动上报\n    captureEvent(mouseEventList, targetKey, data) {\n        // targetKey 一般是后台约定的 key\n        mouseEventList.forEach((event) => {\n            window.addEventListener(event, () => {\n                console.log(\"监听到了\");\n                this.reportTracker({\n                    event,\n                    targetKey,\n                    data,\n                });\n            });\n        });\n    }\n    // 安装上报\n    installTracker() {\n        // 根据用户设置，将哪些功能进行上报\n        if (this.data.historyTracker) {\n            this.captureEvent([\"popState\", \"pushState\", \"replaceState\"], \"history\");\n        }\n        if (this.data.hashTracker) {\n            this.captureEvent([\"hashChange\"], \"hash\");\n        }\n        if (this.data.domTracker) {\n            this.targetKeyReport();\n        }\n        if (this.data.jsError) {\n            this.jsError();\n        }\n    }\n    // 上报方法\n    reportTracker(data) {\n        // 借助 sendBeacon 发送数据到后台\n        const params = Object.assign(this.data, data, {\n            time: new Date().getTime(),\n        });\n        // sendBeacon 无法发送json,借助 blob 格式发送\n        let blob = new Blob([JSON.stringify(params)], {\n            type: \"application/x-www-form-urlencoded\",\n        });\n        navigator.sendBeacon(this.data.requestUrl, blob);\n    }\n    // dom 事件监听上报\n    targetKeyReport() {\n        btnList.forEach((ev) => {\n            window.addEventListener(ev, (e) => {\n                const target = e.target;\n                const targetKey = target.getAttribute(\"target-key\");\n                if (targetKey) {\n                    this.reportTracker({\n                        ev,\n                        targetKey,\n                    });\n                }\n            });\n        });\n    }\n    // 统一收集为 jsError\n    jsError() {\n        this.errorEvent();\n        this.promiseReject();\n    }\n    // error 错误上报\n    errorEvent() {\n        window.addEventListener(\"error\", (event) => {\n            this.reportTracker({\n                event: \"error\",\n                targetKey: \"message\",\n                message: event.message,\n            });\n        });\n    }\n    // promise 错误上报\n    promiseReject() {\n        window.addEventListener(\"unhandledrejection\", (event) => {\n            event.promise.catch((err) => {\n                this.reportTracker({\n                    event: \"promise\",\n                    targetKey: \"message\",\n                    message: err,\n                });\n            });\n        });\n    }\n}\n","references":["/Users/zhangheng/Desktop/project/utils/zh-tracker/src/types/index.ts","/Users/zhangheng/Desktop/project/utils/zh-tracker/src/utils/pv.ts"]}
